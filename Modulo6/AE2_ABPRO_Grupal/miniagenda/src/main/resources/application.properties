spring.application.name=miniagenda

# Puerto personalizado - cambiamos del puerto por defecto 8080 al 8090
# Esto permite evitar conflictos con otras aplicaciones que usen el puerto 8080
server.port=8090

# Configuración de Thymeleaf
# Prefijo: indica dónde están las vistas (templates)
spring.thymeleaf.prefix=classpath:/templates/
# Sufijo: extensión de los archivos de vista
spring.thymeleaf.suffix=.html
# Cache: deshabilitado en desarrollo para ver cambios inmediatamente
spring.thymeleaf.cache=false
# Modo de plantilla: HTML5 es el estándar moderno
spring.thymeleaf.mode=HTML

# Configuración de logging
# Nivel de log general: INFO muestra información importante sin saturar
logging.level.root=INFO
# Nivel de log para nuestra aplicación: DEBUG muestra detalles útiles en desarrollo
logging.level.com.skillnest.miniagenda=DEBUG
# Nivel de log para Spring Framework
logging.level.org.springframework.web=INFO
# Patrón de formato del log en consola
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
# Archivo de log (opcional)
logging.file.name=logs/miniagenda.log
logging.logback.rollingpolicy.max-file-size=10MB

# Configuración de Base de Datos MySQL
# URL de conexión a MySQL (usando Docker Compose en puerto 3307)
spring.datasource.url=jdbc:mysql://localhost:3307/miniagenda
# Usuario de la base de datos
spring.datasource.username=root
# Contraseña de la base de datos (según compose.yaml)
spring.datasource.password=root123
# Driver de MySQL
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA/Hibernate
# Dialecto para MySQL 8
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# Mostrar SQL en logs (útil para debug)
spring.jpa.show-sql=true
# Formatear SQL en logs
spring.jpa.properties.hibernate.format_sql=true
# Estrategia de DDL: update permite crear/actualizar tablas automáticamente
spring.jpa.hibernate.ddl-auto=update
# Configuración adicional de Hibernate
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
